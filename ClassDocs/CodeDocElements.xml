<?xml version="1.0" encoding="utf-8" ?>
<Comments>
    <DisplayShortenPath>
        <summary>
    Gets or sets a value indicating whether the text box display a shorten path to the user or the full path.
        </summary>
    </DisplayShortenPath>
    <RootFolder>
        <summary>
    Gets or sets the root folder where the browsing starts from.
        </summary>
    </RootFolder>

    <ShowNewFolderButton>
        <summary>
    Gets or sets a value indicating whether the New Folder button appears in the folder browser dialog box.
        </summary>
    </ShowNewFolderButton>

    <SelectedPath>
        <summary>
    Gets or sets the path selected by the user.
        </summary>
    </SelectedPath>

    <AddExtension>
        <summary>
    Gets or sets a value indicating whether the dialog box automatically adds an extension to a file name if the user omits the extension.
        </summary>
    </AddExtension>

    <AutoUpgradeEnabled>
        <summary>
    Gets or sets a value indicating whether this FileDialog instance should automatically upgrade appearance and behavior when running on Windows Vista
        </summary>
    </AutoUpgradeEnabled>

    <CheckFileExists>
        <summary>
    Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist. 
        </summary>
    </CheckFileExists>

    <CheckPathExists>
        <summary>
    Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a path that does not exist.
        </summary>
    </CheckPathExists>

    <CustomPlaces>
        <summary>
    Gets the custom places collection for this FileDialog instance.
        </summary>
    </CustomPlaces>

    <DefaultExt>
        <summary>
    Gets or sets the default file name extension.
        </summary>
    </DefaultExt>

    <DereferenceLinks>
        <summary>


Gets or sets a value indicating whether the dialog box returns the location of the file referenced by the shortcut or whether it returns the location of the shortcut (.lnk).
        </summary>
    </DereferenceLinks>

    <FileName>
        <summary>
    Gets or sets a string containing the file name selected in the file dialog box.
        </summary>
    </FileName>

    <FileNames>
        <summary>
    Gets the file names of all selected files in the dialog box.
        </summary>
    </FileNames>

    <Filter>
        <summary>
    Gets or sets the current file name filter string, which determines the choices that appear in the "Save as file type" or "Files of type" box in the dialog box.
        </summary>
    </Filter>

    <FilterIndex>
        <summary>
    Gets or sets the index of the filter currently selected in the file dialog box.
        </summary>
    </FilterIndex>

    <InitialDirectory>
        <summary>
    Gets or sets the initial directory displayed by the file dialog box.
        </summary>
    </InitialDirectory>

    <Multiselect>
        <summary>
    Gets or sets a value indicating whether the dialog box allows multiple files to be selected. 
        </summary>
    </Multiselect>

    <ReadOnlyChecked>
        <summary>
    Gets or sets a value indicating whether the read-only check box is selected. 
        </summary>
    </ReadOnlyChecked>

    <RestoreDirectory>
        <summary>
    Gets or sets a value indicating whether the dialog box restores the directory to the previously selected directory before closing.
        </summary>
    </RestoreDirectory>

    <SafeFileName>
        <summary>
    Gets the file name and extension for the file selected in the dialog box. The file name does not include the path.
        </summary>
    </SafeFileName>

    <SafeFileNames>
        <summary>
    Gets an array of file names and extensions for all the selected files in the dialog box. The file names do not include the path.
        </summary>
    </SafeFileNames>

    <ShowHelp>
        <summary>
    Gets or sets a value indicating whether the Help button is displayed in the file dialog box.
        </summary>
    </ShowHelp>

    <ShowReadOnly>
        <summary>
    Gets or sets a value indicating whether the dialog box contains a read-only check box. 
        </summary>
    </ShowReadOnly>

    <SupportMultiDottedExtensions>
        <summary>
    Gets or sets whether the dialog box supports displaying and saving files that have multiple file name extensions.
        </summary>
    </SupportMultiDottedExtensions>

    <ValidateNames>
        <summary>
    Gets or sets a value indicating whether the dialog box accepts only valid Win32 file names.
        </summary>
    </ValidateNames>

    <Title>
        <summary>
    Gets or sets the dialog box title.
        </summary>
    </Title>



    <FileDirSelectorConstructor>
        <summary>
Create a new instance of FiledirSelector.
        </summary>
    </FileDirSelectorConstructor><!-- public FileDirSelector-->

    <FileDirSelector>
        <summary>
    Composite control allowing user to select file and or directories
        </summary>
    </FileDirSelector><!-- public sealed partial class FileDirSelector : UserControl -->

    <BoarderStyle>
        <summary>
        BorderStyle not used in this FileDirSelector control
        </summary>
    </BoarderStyle><!-- public new BorderStyle BorderStyle -->

    <DefaultSize>
        <summary>
        Defines the default size of the FileDirSelector control.
        </summary>
    </DefaultSize><!-- protected override Size DefaultSize -->

    <DefaultMinimumSize>
        <summary>
        Defines the minimum size of the FileDirSelector control
        </summary>

    </DefaultMinimumSize><!-- protected override Size DefaultMinimumSize -->

    <Text>
        <summary>
    Gets or sets the text contents of the text box.
        </summary>

    </Text><!-- public override string Text -->

    <ButtonSide>
        <summary>
    Defines the layout with FileDirSelector button on the Left hand side or Right. (Default to Right)
        </summary>

    </ButtonSide><!-- public ButtonSide ButtonSide -->

    <FileDirSelector_ButtonSideChanged>
        <summary>
    Consumes the raised ButtonSideChanged event by changing the layout of the control components.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">An ButtonSideEventArgs that contains the event data. </param>

    </FileDirSelector_ButtonSideChanged><!-- private void FileDirSelector_ButtonSideChanged(object sender, EventArgs e) -->

    <HelpRequest>
        <summary>
    Occurs when the user clicks the Help button on a common dialog box.
        </summary>

    </HelpRequest><!-- public event EventHandler HelpRequest -->

    <OnHelpRequest>
        <summary>
    Raises the HelpRequested event.
        </summary>
        <param name="e">A HelpEventArgs that contains the event data. </param>

    </OnHelpRequest><!-- private void OnHelpRequest(EventArgs e) -->

    <M_OpenFileDialog_HelpRequest>
        <summary>
        Consumes the HelpRequested event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A HelpEventArgs that contains the event data.</param>

    </M_OpenFileDialog_HelpRequest><!-- private void M_OpenFileDialog_HelpRequest(object sender, EventArgs e) -->

    <OnFontChanged>
        <summary>
    Consumes the FontChange event.
        </summary>
        <param name="e">A FontEventArgs that contains the event data.</param>

    </OnFontChanged><!-- protected override void OnFontChanged -->

    <button1_Click>
        <summary>
    Consumes the composite button click event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </button1_Click><!-- private void button1_Click(object sender, EventArgs e) -->

    <Cut_Click>
        <summary>
    Consumes the composite text box context menu Cut event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </Cut_Click><!-- private void Cut_Click(object sender, EventArgs e) -->

    <Paste_Click>
        <summary>
    Consumes the composite text box context menu Past event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </Paste_Click><!-- private void Paste_Click(object sender, EventArgs e) -->

    <SelectAll_Click>
        <summary>
    Consumes the composite text box context menu Select All event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </SelectAll_Click><!-- private void SelectAll_Click(object sender, EventArgs e) -->

    <Delete_Click>
        <summary>
    Consumes the composite text box context menu Delete event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </Delete_Click><!-- private void Delete_Click(object sender, EventArgs e) -->

    <Copy_Click>
        <summary>
    Consumes the composite text box context menu Copy event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </Copy_Click><!-- private void Copy_Click(object sender, EventArgs e) -->

    <Undo_Click>
        <summary>
    Consumes the composite text box context menu Undo event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </Undo_Click><!-- private void Undo_Click(object sender, EventArgs e) -->

    <contextMenuStrip1_Opening>
        <summary>
    Consumes the composite text box context menu Opening event.
        </summary>
        <param name="sender">Object sender.</param>
        <param name="e">A ClickEventArgs that contains the event data.</param>

    </contextMenuStrip1_Opening><!-- private void contextMenuStrip1_Opening(object sender, CancelEventArgs e) -->

    <ButtonSideChanged>
        <summary>
    Occurs when the user selects a ButtonSide
        </summary>

    </ButtonSideChanged><!-- public event EventHandler ButtonSideChanged -->

    <OnButtonSideChanged>
        <summary>
    Raises the ButtonSideChanged event.
        </summary>
        <param name="e"></param>

    </OnButtonSideChanged><!-- private void OnButtonSideChanged(EventArgs e) -->

    <Reset>
        <summary>
Resets all properties to their default values.
        </summary>

    </Reset><!-- public void Reset() -->

    <ToString>
        <summary>
    This API supports the product infrastructure and is not intended to be used directly from your code.
        </summary>
        <returns> Provides a string version of this object.</returns>

    </ToString><!-- public override string ToString() -->

    <ShortenPath>
        <summary>
Shortens a file path to a specified given length.
        </summary>
        <param name="path">The file path to shorten</param>
        <param name="maxLength">The max length of the output path.</param>
        <returns>The path with some of the middle directory paths replaced with an ellipsis when the given path is over the given length otherwise returns the given path.</returns>
        <remarks>
Shortens the path by removing some of the "middle directories" in the path and inserting an ellipsis. If the filename and root path (drive letter or UNC server name)     in itself exceeds the maxLength, the filename will be cut to fit.
UNC-paths and relative paths are also supported. The inserted ellipsis is not a true ellipsis char, but a string of three dots.
        </remarks>
        <example>
ShortenPath(@"c:\websites\myproject\www_myproj\App_Data\themegafile.txt", 50)<br/>
Result: "c:\websites\myproject\...\App_Data\themegafile.txt"<br/> <br/> 

ShortenPath(@"c:\websites\myproject\www_myproj\App_Data\theextremelylongfilename_morelength.txt", 30)<br/>
Result: "c:\...gfilename_morelength.txt"<br/><br/> 

ShortenPath(@"\\myserver\theshare\myproject\www_myproj\App_Data\theextremelylongfilename_morelength.txt", 30)<br/>
Result: "\\myserver\...e_morelength.txt"<br/><br/> 

ShortenPath(@"\\myserver\theshare\myproject\www_myproj\App_Data\themegafile.txt", 50)<br/>
Result: "\\myserver\theshare\...\App_Data\themegafile.txt"<br/><br/> 

ShortenPath(@"\\192.168.1.178\theshare\myproject\www_myproj\App_Data\themegafile.txt", 50)<br/>
Result: "\\192.168.1.178\theshare\...\themegafile.txt"<br/><br/> 

ShortenPath(@"\theshare\myproject\www_myproj\App_Data\", 30)<br/>
Result: "\theshare\...\App_Data\"<br/><br/> 

ShortenPath(@"\theshare\myproject\www_myproj\App_Data\themegafile.txt", 35)<br/>
Result: "\theshare\...\themegafile.txt"<br/><br/> 
        </example>

    </ShortenPath><!-- public static string ShortenPath(string path, int maxLength) -->

    <TextBoxVisiableChars>
        <summary>
Calculates an approximate number of characters that can be view in the text box text area.
        </summary>
        <returns>The number of characters calculated that could fit in the text box text area.</returns>

    </TextBoxVisiableChars><!-- private int TextBoxVisiableChars() -->

    <enumButtonSide>
        <summary>
Enumeration used to determine which side should the composite control button be on.
        </summary>

    </enumButtonSide><!-- public enum ButtonSide -->

    <Right>
        <summary>
The button to be rendered on the right hand side.
        </summary>


    </Right><!-- Right = 0, -->

    <Left>
        <summary>
The button to be rendered on the left hand side.
        </summary>

    </Left><!-- Left = 1 -->

    <enumFileDirDialogType>
        <summary>
    Enumeration used to determine which dialog should be shown.
        </summary>
    </enumFileDirDialogType>

    <enumItemOPENFILEDIALOG>
        <summary>
        Show the OpenFileDialog.
        </summary>
    </enumItemOPENFILEDIALOG>

    <enumItemFOLDERBROWSERDIALOG>
        <summary>
        Show the FolderBrowserDialog.
        </summary>
    </enumItemFOLDERBROWSERDIALOG>

    <FileDirDialog>
        <summary>
        Defines which dialog to be shown to the user.
        </summary>
    </FileDirDialog>

    <FileDirSelectorlDesigner>
        <summary>
 Change the design mode behavior of the FileDirSelector in the designer.
        </summary>

    </FileDirSelectorlDesigner><!-- internal class FileDirSelectorlDesigner : ControlDesigner -->

    <FileDirSelectorlDesignerConstructor>
        <summary>
Creates a new instance of the FileDirSelectorlDesigner to be associated with a control.
        </summary>

    </FileDirSelectorlDesignerConstructor><!-- FileDirSelectorlDesigner() -->

    <SelectionRules>
        <summary>
Gets the selection rules that indicate the movement capabilities of a component.
        </summary>

    </SelectionRules><!-- public override SelectionRules SelectionRules -->

</Comments>